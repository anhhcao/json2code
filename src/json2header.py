#!/usr/bin/python

# Exit codes
# 0 - Success
# 1 - JSON file not found
# 2 - Error decoding the JSON file
# 3 - Invalid key name in JSON file

import json
from argparse import ArgumentParser
from os.path import basename, splitext
import json2header_util as util

# process arguments
parser = ArgumentParser(
    prog='json2header',
    description='Converts a JSON (database) file to a c/c++ header file',
    epilog='Currently only supports JSON files containing string, integer, and decimal data types'
)

parser.add_argument('filename', help='The JSON file to be converted')
parser.add_argument('-o', '--output',
                    help='The name of the output header file (including extension)')
parser.add_argument('-t', '--type', 
                    default='h',
                    choices=['h', 'hpp'],
                    help='The type of the output file')

args = parser.parse_args()

# load JSON file
try:
    with open(args.filename) as jsonfile:
        db = json.load(jsonfile)
except FileNotFoundError:
    print(f'File {args.json} not found')
    exit(1)
except json.decoder.JSONDecodeError as decode_err:
    print(f'Error decoding the JSON file; {decode_err}')
    exit(2)

# get basename
base_fname = splitext(basename(args.filename))[0]

# set default output file name
oname = args.output if args.output else f'./{base_fname}.{args.type}'
base_oname = splitext(basename(oname))[0]

# name of the macro used in the include guards
macro_name=f'{base_oname.upper()}_{args.type.upper()}'

# buffer containing generated file content
buffer = f'''\
#IFNDEF {macro_name}
#DEFINE {macro_name}

/* This file was generated by json2header.py */
'''

# process and write data to buffer
for key in db.keys():
    
    if (key in util.c_keywords):
        exit(3)

    