#!/usr/bin/python

import json
from argparse import ArgumentParser
from os.path import basename, splitext
import json2code_util as util

def cvt2code(filename,
             strlen=None, arrlen=None,
             output=None, 
             override=False, init=False, 
             incl='', sys_incl='', 
             print_output=False):

    util.strlen = strlen
    util.arrlen = arrlen

    # load JSON file

    with open(filename, 'r') as jsonfile:
        db = json.load(jsonfile)

    # get basename
    base_fname = splitext(basename(filename))[0]

    # set default output file name
    oname = output if output else f'./{base_fname}.h'
    base_oname = splitext(basename(oname))[0]

    # name of the macro used in the include guards
    macro_name=f'{base_oname.upper()}_H'
    
    # buffer with initialized values
    init_buffer=''
    # buffer with uninitialized values
    uninit_buffer=''

    # process data and build code lines
    for id, v in db.items():
        
        util.validate_id(id)

        l, r = util.binding2str(id, v)
        if override:
            l = f'{macro_name}_CONST {l}'

        init_buffer += f'{l} = {r};\n'
        if init:
            uninit_buffer += f'extern {l};\n'

    # local includes
    loc_incl_buffer = ''
    if incl:
        loc_incl_buffer = '\n/* Local includes */\n'
        for f in incl:
            loc_incl_buffer += f'#include \"{f}\"\n'

    # system includes
    sys_incl_buffer = ''
    if sys_incl:
        sys_incl_buffer = '\n/* System includes */\n'
        for f in sys_incl:
            sys_incl_buffer += f'#include <{f}>\n'

    # Write output file contents to buffer
    buffer = (
         '/* This file was generated by json2code.py */\n'
         '\n'
        f'#ifndef {macro_name}\n'
        f'#define {macro_name}\n'
        f'{loc_incl_buffer}{sys_incl_buffer}\n'
         '#ifndef __cplusplus\n'
         '#endif /* __cplusplus */\n'
        )

    if override:
        buffer += (
         '\n#ifdef OVERRIDE\n'
        f'#define {macro_name}_CONST\n'
         '#else\n'
        f'#define {macro_name}_CONST const\n'
         '#endif /* OVERRIDE */\n'
        )

    if init:
        buffer += (
         '\n#ifdef INITIALIZE\n'
         '\n'
        f'{init_buffer}\n'
         '#else\n'
         '\n'
        f'{uninit_buffer}\n'
         '#endif /* INITIALIZE */\n'
        )
    else:
        buffer += (
         f'\n{init_buffer}'
        )

    buffer += (
         f'\n#endif /* {macro_name} */'
        )

    # print?
    if print_output:
        print(buffer)

    # write contents of buffer to output file
    with open(oname, 'w') as ofile:
        ofile.write(buffer)

if __name__ == '__main__':

    parser = ArgumentParser(
        prog='json2code',
        description='Converts a JSON (database) file to a c/c++ header file',
        epilog='Currently only supports JSON files containing string, integer, boolean, floating point, and (nested) lists (of these)'
    )

    parser.add_argument('filename', 
                        help='the JSON file to be converted')
    parser.add_argument('-o', '--output',
                        help='the name of the output header file (excluding the .h extension)')
    parser.add_argument('--strlen',
                        type=util.positive,
                        help='fixes the length of all strings (including the null byte)')
    parser.add_argument('--arrlen',
                        type=util.positive,
                        help='fixes the length of all (non-string) arrays')
    parser.add_argument('--override',
                        action='store_true',
                        help='enables overriding of the output file when the OVERRIDE macro is defined')
    parser.add_argument('--init',
                        action='store_true',
                        help='initializes the variables in the output file only when the INITIALIZE macro is defined');
    parser.add_argument('-i', '--incl',
                        action='append',
                        help='includes the local header file in the output file')
    parser.add_argument('-s', '--sys-incl',
                        action='append',
                        help='includes the system header file in the output file')
    parser.add_argument('-p', '--print',
                        action='store_true',
                        help='prints the output to stdout')

    args = parser.parse_args()

    cvt2code(args.filename, 
             args.strlen, args.arrlen,
             args.output, 
             args.override, args.init, 
             args.incl, args.sys_incl, 
             args.print)
